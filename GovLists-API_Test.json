{
  "swagger": "2.0",
  "info": {
    "title": "Gov Lists API",
    "description": "API for quering lists that are maintained in the gov lists system. The API is available for internal usage within mimshal zamin",
    "version": "v1"
  },
  "basePath": "/test/tehila/govforms/rest/lists/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/{Name}": {
      "get": {
        "tags": [
          "ListsData"
        ],
        "summary": "Get the data of the requested list (GET method).",
        "description": "By default all the data in the requested list will be returned in a random order. \r\nTo change these defaults, use one or more of the following paramters in the query:   \r\n**SortBy:** the Column in the list according to which the returned data will be sorted in ascending order.      \r\n**Filters:** The conditions that are used to filter the returned data. all the rows that meet the filters conditions (if there are any) will be returned.   \r\n**Columns:** An array of Columns. If exist, only these columns will be returned.   \r\n**An example for a request:**     \r\n<code>\r\nGovLists/Streets?sortBy=Name&filters[CityCode]=472&columns[0]=Name&columns[1]=Code\r\n</code>",
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "the name of the requested list",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "pattern": "^[\\dA-Za-z-_]*$"
            }
          },
          {
            "name": "Filters",
            "in": "query",
            "description": "The conditions that are used to filter the returned data. all the rows that meet the filters conditions (if there are any) will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Filter"
              },
              "nullable": true
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "the Column in the list according to which the returned data will be sorted in ascending order.",
            "schema": {
              "maxLength": 50,
              "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "Columns",
            "in": "query",
            "description": " An array of Columns. If exist, only these columns will be returned.   ",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ColumnName"
              },
              "nullable": true
            }
          },
          {
            "name": "applicationId",
            "in": "header",
            "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
              "format": "uuid"
            }
          },
          {
            "name": "serviceName",
            "in": "header",
            "description": "The name of the consuming service.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the consuming service ."
            }
          },
          {
            "name": "idnum",
            "in": "header",
            "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
            "schema": {
              "pattern": "^\\d{0,9}$",
              "type": "string",
              "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has reached the API.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ListsData"
        ],
        "summary": "Get the data of the requested list (POST method).",
        "description": "By default all the data in the requested list will be returned in a random order. \r\nTo change these defaults, use one or more of the following paramters:   \r\n**SortBy:** the Column in the list according to which the returned data will be sorted in ascending order.      \r\n**Filters:** The conditions that are used to filter the returned data. all the rows that meet the filters conditions (if there are any) will be returned.   \r\n**Columns:** An array of Columns. If exists, only these columns will be returned.",
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "the name of the requested list",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "pattern": "^[\\dA-Za-z-_]*$"
            }
          },
          {
            "name": "applicationId",
            "in": "header",
            "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
              "format": "uuid"
            }
          },
          {
            "name": "serviceName",
            "in": "header",
            "description": "The name of the consuming service.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the consuming service ."
            }
          },
          {
            "name": "idnum",
            "in": "header",
            "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
            "schema": {
              "pattern": "^\\d{0,9}$",
              "type": "string",
              "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/QueryParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request has reached the API.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{Name}/Exists": {
      "post": {
        "tags": [
          "ListsData"
        ],
        "summary": "Check if data exist in the given list for the given condition",
        "description": "Returns True if there is data in the specified list for the given filters (conditions), \r\nreturns False otherwise.",
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "description": "the name of the requested list",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "pattern": "^[\\dA-Za-z-_]*$"
            }
          },
          {
            "name": "applicationId",
            "in": "header",
            "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
              "format": "uuid"
            }
          },
          {
            "name": "serviceName",
            "in": "header",
            "description": "The name of the consuming service.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the consuming service ."
            }
          },
          {
            "name": "idnum",
            "in": "header",
            "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
            "schema": {
              "pattern": "^\\d{0,9}$",
              "type": "string",
              "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The conditions that are used to filter the returned data.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "text/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            },
            "application/*+xml": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Filter"
                },
                "description": "The conditions that are used to filter the returned data."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request has reached the API.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExistResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExistResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExistResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{Name}/Columns": {
      "get": {
        "tags": [
          "ListsSettings"
        ],
        "summary": "Get the columns names and attributes of a given list",
        "parameters": [
          {
            "name": "Name",
            "description": "the name of the requested list",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string",
              "pattern": "^[\\dA-Za-z-_]*$"
            }
          },
          {
            "name": "applicationId",
            "in": "header",
            "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
            "required": true,
            "schema": {
              "type": "string",
              "description": "A predefined identifier that was \r\n            produced by the API owner for the consuming application .",
              "format": "uuid"
            }
          },
          {
            "name": "serviceName",
            "in": "header",
            "description": "The name of the consuming service.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the consuming service ."
            }
          },
          {
            "name": "idnum",
            "in": "header",
            "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
            "schema": {
              "pattern": "^\\d{0,9}$",
              "type": "string",
              "description": "The ID of an identified consumer, passed in the header and required only if the access to the list is restricted",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has reached the API.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnListResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Filter": {
        "required": [
          "columnName",
          "value"
        ],
        "type": "object",
        "properties": {
          "columnName": {
            "description": "The name of the column in the list, case snesitive",
            "maxLength": 50,
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
            "type": "string"
          },
          "value": {
            "pattern": "^[a-zA-Z0-9א-ת_\\-.:,'_\\$@;=\\^?+!\\[\\]*%#\\(\\)\\s]*$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ColumnName": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the column in the list, case snesitive",
            "maxLength": 50,
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryParams": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "description": "The conditions that are used to filter the returned data. all the rows that meet the filters conditions (if there are any) will be returned.",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "sortBy": {
            "description": "the Column in the list according to which the returned data will be sorted in ascending order.",
            "maxLength": 50,
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
            "type": "string",
            "nullable": true
          },
          "columns": {
            "type": "array",
            "description": "An array of Columns. If exist, only these columns will be returned.",
            "items": {
              "$ref": "#/components/schemas/ColumnName"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListDataResponse": {
        "type": "object",
        "properties": {
          "httpCode": {
            "$ref": "#/components/schemas/httpCode"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {},
            "description": "The list's data which fulfills the request",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExistResponse": {
        "type": "object",
        "properties": {
          "httpCode": {
            "$ref": "#/components/schemas/httpCode"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true
          },
          "data": {
            "type": "boolean",
            "items": {},
            "description": "True if there is data in the specified list for the given filters (conditions), False otherwise.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "httpCode": {
        "type": "integer",
        "format": "int32",
        "enum": [
          200,
          400,
          401,
          403,
          500
        ],
        "description": " * `200`  - Success. \r\n * `400` - If the query parameters contain none existing columns or if the list wasn't found \r\n * `401` - If the access to the list is restricted and the consumer does't have the rquired permissions. \r\n * `403`- If the Application ID in the rquest is not registered \r\n *`500` - In case of an internal error."
      },
      "Column": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
            "type": "string",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean"
          },
          "isUnique": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ColumnListResponse": {
        "type": "object",
        "properties": {
          "httpCode": {
            "$ref": "#/components/schemas/httpCode"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            },
            "description": "the columns names and attributes the given list",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}